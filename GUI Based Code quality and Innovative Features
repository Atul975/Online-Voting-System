import javafx.animation.PauseTransition;
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.stage.Stage;
import javafx.scene.paint.Color;
import javafx.util.Duration;
import java.net.HttpURLConnection;
import java.net.URL;
import java.io.*;

public class VotingApp extends Application {

    // UI Components
    private TextField usernameField, passwordField;
    private Button loginButton, registerButton, voteButton, viewResultsButton;
    private ChoiceBox<String> candidateChoiceBox;
    private Label errorLabel, progressLabel;
    private ProgressBar progressBar;
    private VBox loginBox, voteBox, resultsBox, mainBox;
    private Scene mainScene;
    private Stage primaryStage;

    @Override
    public void start(Stage primaryStage) {
        this.primaryStage = primaryStage;

        // Initialize components
        errorLabel = new Label();
        errorLabel.setTextFill(Color.RED);
        progressLabel = new Label("Please wait...");
        progressBar = new ProgressBar(0);

        // Login Form
        usernameField = new TextField();
        passwordField = new PasswordField();
        loginButton = new Button("Login");
        registerButton = new Button("Register");

        loginButton.setOnAction(e -> login()); // Handle login button click
        registerButton.setOnAction(e -> showRegisterForm()); // Handle register button click

        loginBox = new VBox(10, new Label("Username:"), usernameField, new Label("Password:"), passwordField, loginButton, registerButton, errorLabel);

        // Vote Form (hidden initially, only visible after login)
        candidateChoiceBox = new ChoiceBox<>();
        voteButton = new Button("Vote");
        voteButton.setOnAction(e -> castVote()); // Handle vote button click
        voteButton.setDisable(true); // Initially disabled

        voteBox = new VBox(10, new Label("Select Candidate:"), candidateChoiceBox, voteButton);

        // Results Form (hidden initially)
        viewResultsButton = new Button("View Results");
        viewResultsButton.setOnAction(e -> viewResults()); // Handle view results button click
        resultsBox = new VBox(10, viewResultsButton);

        // Main Box combining all the components
        mainBox = new VBox(20, loginBox, voteBox, resultsBox, progressLabel, progressBar);
        mainScene = new Scene(mainBox, 400, 400);

        primaryStage.setScene(mainScene);
        primaryStage.setTitle("Online Voting System");
        primaryStage.show();
    }

    // Innovative Feature: Displaying progress during operations (login, voting)
    private void showProgress(double progress) {
        progressBar.setProgress(progress);
        progressLabel.setVisible(true);
        progressBar.setVisible(true);
    }

    private void hideProgress() {
        progressLabel.setVisible(false);
        progressBar.setVisible(false);
    }

    // Login Method with validation and error handling
    private void login() {
        errorLabel.setText(""); // Clear previous errors
        showProgress(0.1); // Show initial progress

        String username = usernameField.getText();
        String password = passwordField.getText();

        // Data Validation: Check if fields are empty
        if (username.isEmpty() || password.isEmpty()) {
            errorLabel.setText("Username and Password cannot be empty.");
            hideProgress();
            return;
        }

        // Data Validation: Username and Password should be at least 4 characters
        if (username.length() < 4 || password.length() < 4) {
            errorLabel.setText("Username and Password must be at least 4 characters.");
            hideProgress();
            return;
        }

        // Simulating backend API call with delay
        simulateNetworkOperation(() -> {
            String data = "{\"username\":\"" + username + "\", \"password\":\"" + password + "\"}";
            String response = sendPostRequest("http://localhost:8080/api/login", data);

            // If successful login
            if (response.contains("Login successful")) {
                // Hide login box and show vote form
                loginBox.setVisible(false);
                voteBox.setVisible(true);
                voteButton.setDisable(false); // Enable vote button
                loadCandidates(); // Load candidates

                // Show results button
                resultsBox.setVisible(true);
            } else {
                errorLabel.setText(response); // Display login error
            }

            hideProgress();
        });
    }

    // Register Method with validation
    private void showRegisterForm() {
        errorLabel.setText(""); // Clear previous errors
        String username = usernameField.getText();
        String password = passwordField.getText();

        // Data Validation: Check if fields are empty
        if (username.isEmpty() || password.isEmpty()) {
            errorLabel.setText("Username and Password cannot be empty.");
            return;
        }

        // Data Validation: Username and Password should be at least 4 characters
        if (username.length() < 4 || password.length() < 4) {
            errorLabel.setText("Username and Password must be at least 4 characters.");
            return;
        }

        // Simulating backend API call with delay
        simulateNetworkOperation(() -> {
            String data = "{\"username\":\"" + username + "\", \"password\":\"" + password + "\"}";
            String response = sendPostRequest("http://localhost:8080/api/register", data);

            if (response.contains("Registration successful")) {
                errorLabel.setText("Registration successful. Please log in.");
            } else {
                errorLabel.setText(response); // Display registration error
            }

            hideProgress();
        });
    }

    // Cast Vote Method with validation and feedback
    private void castVote() {
        errorLabel.setText(""); // Clear previous errors
        showProgress(0.5); // Show progress during voting

        // Data Validation: Ensure a candidate is selected
        if (candidateChoiceBox.getSelectionModel().getSelectedItem() == null) {
            errorLabel.setText("Please select a candidate.");
            hideProgress();
            return;
        }

        Long candidateId = (long) (candidateChoiceBox.getSelectionModel().getSelectedIndex() + 1); // Selecting based on index
        Long userId = 1L; // Placeholder user ID (to be handled properly after login)

        String data = "userId=" + userId + "&candidateId=" + candidateId;
        
        // Simulate network operation with delay
        simulateNetworkOperation(() -> {
            String response = sendPostRequest("http://localhost:8080/api/vote", data);

            if (response.contains("Vote cast successfully")) {
                errorLabel.setText("Vote cast successfully.");
            } else {
                errorLabel.setText(response); // Display voting error
            }

            hideProgress();
        });
    }

    // View Results Method
    private void viewResults() {
        showProgress(0.7); // Show progress during fetching results

        // Simulate network operation with delay
        simulateNetworkOperation(() -> {
            String response = sendGetRequest("http://localhost:8080/api/results");

            if (response.contains("Error")) {
                errorLabel.setText(response); // Display error
            } else {
                displayResults(response); // Display the results (or parse and format them)
            }

            hideProgress();
        });
    }

    // Utility to simulate network operation with delay for demo
    private void simulateNetworkOperation(Runnable task) {
        // Show progress initially
        showProgress(0.2);

        // Pause for 2 seconds to simulate network delay
        PauseTransition delay = new PauseTransition(Duration.seconds(2));
        delay.setOnFinished(e -> task.run());
        delay.play();
    }

    // Utility to send POST request
    private String sendPostRequest(String urlStr, String data) {
        try {
            URL url = new URL(urlStr);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("POST");
            conn.setDoOutput(true);

            try (OutputStream os = conn.getOutputStream()) {
                byte[] input = data.getBytes("utf-8");
                os.write(input, 0, input.length);
            }

            try (BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream(), "utf-8"))) {
                StringBuilder response = new StringBuilder();
                String responseLine;
                while ((responseLine = br.readLine()) != null) {
                    response.append(responseLine.trim());
                }
                return response.toString();
            }
        } catch (IOException e) {
            e.printStackTrace();
            return "Error: " + e.getMessage(); // Return error message
        }
    }

    // Utility to send GET request
    private String sendGetRequest(String urlStr) {
        try {
            URL url = new URL(urlStr);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("GET");

            try (BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream(), "utf-8"))) {
                StringBuilder response = new StringBuilder();
                String responseLine;
                while ((responseLine = br.readLine()) != null) {
                    response.append(responseLine.trim());
                }
                return response.toString();
            }
        } catch (IOException e) {
            e.printStackTrace();
            return "Error: " + e.getMessage(); // Return error message
        }
    }

    // Load Candidates into ChoiceBox
    private void loadCandidates() {
        candidateChoiceBox.getItems().clear();
        candidateChoiceBox.getItems().addAll("Candidate 1", "Candidate 2", "Candidate 3");
    }

    // Display Results (mock method)
    private void displayResults(String response) {
        // Display the results, for now, we print the response
        System.out.println("Voting Results: " + response);
    }

    public static void main(String[] args) {
        launch(args);
    }
}

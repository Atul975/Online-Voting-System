import java.util.*;

public class AdvancedVotingSystem {

    // Voter class encapsulating voter details
    static class Voter {
        private final String voterId;
        private boolean hasVoted;

        public Voter(String voterId) {
            this.voterId = voterId;
            this.hasVoted = false;
        }

        public String getVoterId() {
            return voterId;
        }

        public boolean hasVoted() {
            return hasVoted;
        }

        public void markAsVoted() {
            hasVoted = true;
        }
    }

    // VotingSystem class for managing the system
    static class VotingSystem {
        private final Map<String, Voter> voterRegistry;  // Registered voters
        private final Map<String, Integer> candidates;  // Candidate vote counts
        private final Map<String, Set<String>> voteAuditTrail; // Audit trail: Voter ID to Candidate Name

        public VotingSystem() {
            this.voterRegistry = new HashMap<>();
            this.candidates = new HashMap<>();
            this.voteAuditTrail = new HashMap<>();
        }

        // Registers a voter
        public void registerVoter(String voterId) {
            if (isNullOrEmpty(voterId)) {
                logError("Voter ID cannot be empty.");
                return;
            }

            if (voterRegistry.containsKey(voterId)) {
                logError("Voter ID already registered: " + voterId);
                return;
            }

            voterRegistry.put(voterId, new Voter(voterId));
            logSuccess("Voter registered successfully: " + voterId);
        }

        // Adds a candidate
        public void addCandidate(String candidateName) {
            if (isNullOrEmpty(candidateName)) {
                logError("Candidate name cannot be empty.");
                return;
            }

            if (candidates.containsKey(candidateName)) {
                logError("Candidate already exists: " + candidateName);
                return;
            }

            candidates.put(candidateName, 0);
            logSuccess("Candidate added successfully: " + candidateName);
        }

        // Allows a voter to cast a vote
        public void castVote(String voterId, String candidateName) {
            if (!isValidVoter(voterId) || !isValidCandidate(candidateName)) return;

            Voter voter = voterRegistry.get(voterId);
            if (voter.hasVoted()) {
                logError("Voter has already voted: " + voterId);
                return;
            }

            // Update vote counts
            voter.markAsVoted();
            candidates.put(candidateName, candidates.get(candidateName) + 1);

            // Add to audit trail
            voteAuditTrail.computeIfAbsent(voterId, k -> new HashSet<>()).add(candidateName);

            logSuccess("Vote cast successfully for " + candidateName + " by voter " + voterId);
        }

        // Displays voting results
        public void displayResults() {
            if (candidates.isEmpty()) {
                logError("No candidates to display results.");
                return;
            }

            System.out.println("\nVoting Results:");
            candidates.forEach((candidate, votes) -> 
                System.out.printf("Candidate: %s | Votes: %d%n", candidate, votes)
            );
            System.out.println("Total Votes Cast: " + getTotalVotes());
        }

        // Displays the audit trail of votes
        public void displayAuditTrail() {
            if (voteAuditTrail.isEmpty()) {
                logError("No audit trail available.");
                return;
            }

            System.out.println("\nAudit Trail:");
            voteAuditTrail.forEach((voterId, candidates) -> 
                System.out.printf("Voter ID: %s | Voted For: %s%n", voterId, String.join(", ", candidates))
            );
        }

        // Gets the total number of votes cast
        private int getTotalVotes() {
            return candidates.values().stream().mapToInt(Integer::intValue).sum();
        }

        // Validates voter existence
        private boolean isValidVoter(String voterId) {
            if (isNullOrEmpty(voterId)) {
                logError("Voter ID cannot be empty.");
                return false;
            }

            if (!voterRegistry.containsKey(voterId)) {
                logError("Voter ID not registered: " + voterId);
                return false;
            }

            return true;
        }

        // Validates candidate existence
        private boolean isValidCandidate(String candidateName) {
            if (isNullOrEmpty(candidateName)) {
                logError("Candidate name cannot be empty.");
                return false;
            }

            if (!candidates.containsKey(candidateName)) {
                logError("Candidate not found: " + candidateName);
                return false;
            }

            return true;
        }

        // Utility method to check null or empty input
        private boolean isNullOrEmpty(String str) {
            return str == null || str.trim().isEmpty();
        }

        // Utility methods for logging
        private void logSuccess(String message) {
            System.out.println("[SUCCESS] " + message);
        }

        private void logError(String message) {
            System.out.println("[ERROR] " + message);
        }
    }

    // Main method for system interaction
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        VotingSystem votingSystem = new VotingSystem();

        System.out.println("=== Advanced Online Voting System ===");
        while (true) {
            try {
                printMenu();
                int choice = scanner.nextInt();
                scanner.nextLine(); // Consume newline

                switch (choice) {
                    case 1:
                        System.out.print("Enter Voter ID: ");
                        votingSystem.registerVoter(scanner.nextLine());
                        break;

                    case 2:
                        System.out.print("Enter Candidate Name: ");
                        votingSystem.addCandidate(scanner.nextLine());
                        break;

                    case 3:
                        System.out.print("Enter Voter ID: ");
                        String voterId = scanner.nextLine();
                        System.out.print("Enter Candidate Name: ");
                        String candidateName = scanner.nextLine();
                        votingSystem.castVote(voterId, candidateName);
                        break;

                    case 4:
                        votingSystem.displayResults();
                        break;

                    case 5:
                        votingSystem.displayAuditTrail();
                        break;

                    case 6:
                        System.out.println("Thank you for using the voting system. Goodbye!");
                        scanner.close();
                        return;

                    default:
                        System.out.println("[ERROR] Invalid choice. Please try again.");
                }
            } catch (InputMismatchException e) {
                System.out.println("[ERROR] Invalid input. Please enter a number.");
                scanner.nextLine(); // Clear invalid input
            }
        }
    }

    // Prints the menu
    private static void printMenu() {
        System.out.println("\nMenu:");
        System.out.println("1. Register Voter");
        System.out.println("2. Add Candidate");
        System.out.println("3. Cast Vote");
        System.out.println("4. Display Results");
        System.out.println("5. Display Audit Trail");
        System.out.println("6. Exit");
        System.out.print("Choose an option: ");
    }
}

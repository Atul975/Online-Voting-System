import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.stage.Stage;
import javafx.geometry.Insets;
import javafx.scene.text.Text;
import javafx.scene.text.Font;
import javafx.scene.paint.Color;

public class ProjectDocumentationApp extends Application {

    private TextArea documentationArea;
    private TextField titleField, authorField;
    private Button saveButton, clearButton, generateButton;
    private Label errorLabel;

    @Override
    public void start(Stage primaryStage) {
        primaryStage.setTitle("Online Voting System - Project Documentation");

        // Initializing components
        titleField = new TextField();
        authorField = new TextField();
        documentationArea = new TextArea();
        saveButton = new Button("Save Documentation");
        clearButton = new Button("Clear All");
        generateButton = new Button("Generate Documentation");
        errorLabel = new Label();
        errorLabel.setTextFill(Color.RED);

        // Set placeholder text
        titleField.setPromptText("Enter project title");
        authorField.setPromptText("Enter author name");

        // Setting initial content in TextArea (this can be edited)
        documentationArea.setText("Introduction:\nThis Online Voting System allows users to cast votes securely and anonymously.\n\nFeatures:\n1. Secure login\n2. Vote casting\n3. Results viewing\n\nTechnical Details:\nTechnology stack used: Java, JavaFX, MySQL");
        documentationArea.setWrapText(true);

        // Button actions
        generateButton.setOnAction(e -> generateDocumentation());
        saveButton.setOnAction(e -> saveDocumentation());
        clearButton.setOnAction(e -> clearFields());

        // Layout for form fields and buttons
        VBox formBox = new VBox(10);
        formBox.setPadding(new Insets(20));
        formBox.getChildren().addAll(
                new Label("Project Title: "), titleField,
                new Label("Author: "), authorField,
                generateButton, saveButton, clearButton, errorLabel
        );

        // Layout for documentation area
        VBox documentationBox = new VBox(10);
        documentationBox.setPadding(new Insets(20));
        documentationBox.getChildren().addAll(
                new Label("Project Documentation"), documentationArea
        );

        // Main layout combining form and documentation area
        HBox mainLayout = new HBox(20);
        mainLayout.setPadding(new Insets(20));
        mainLayout.getChildren().addAll(formBox, documentationBox);

        // Scene setup
        Scene scene = new Scene(mainLayout, 800, 600);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    // Method to generate documentation content
    private void generateDocumentation() {
        String title = titleField.getText();
        String author = authorField.getText();

        // Validation for fields
        if (title.isEmpty() || author.isEmpty()) {
            errorLabel.setText("Title and Author fields cannot be empty!");
            return;
        }

        errorLabel.setText(""); // Clear error label if validation passes

        // Generating the content for project documentation
        String documentation = "Project Documentation: \n\n";
        documentation += "Title: " + title + "\n";
        documentation += "Author: " + author + "\n\n";
        documentation += "Introduction:\n";
        documentation += "This Online Voting System allows users to cast votes securely and anonymously.\n\n";
        documentation += "Features:\n";
        documentation += "1. Secure login\n";
        documentation += "2. Vote casting\n";
        documentation += "3. Results viewing\n\n";
        documentation += "Technical Details:\n";
        documentation += "Technology stack used: Java, JavaFX, MySQL\n\n";

        // Setting the generated content to TextArea
        documentationArea.setText(documentation);
    }

    // Method to save the documentation to a file
    private void saveDocumentation() {
        String docContent = documentationArea.getText();

        if (docContent.isEmpty()) {
            errorLabel.setText("There is no content to save.");
            return;
        }

        // File saving logic (simple version using FileChooser)
        try {
            // Save the document content to a text file
            FileChooser fileChooser = new FileChooser();
            fileChooser.getExtensionFilters().add(new FileChooser.ExtensionFilter("Text Files", "*.txt"));
            File file = fileChooser.showSaveDialog(null);

            if (file != null) {
                BufferedWriter writer = new BufferedWriter(new FileWriter(file));
                writer.write(docContent);
                writer.close();
                errorLabel.setText("Documentation saved successfully.");
            }
        } catch (IOException e) {
            errorLabel.setText("Error while saving documentation.");
        }
    }

    // Method to clear the fields
    private void clearFields() {
        titleField.clear();
        authorField.clear();
        documentationArea.clear();
        errorLabel.setText("");
    }

    public static void main(String[] args) {
        launch(args);
    }
}

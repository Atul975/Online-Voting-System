import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.stage.Stage;
import java.net.HttpURLConnection;
import java.net.URL;
import java.io.*;
import javafx.scene.paint.Color;

public class VotingApp extends Application {

    private TextField usernameField, passwordField;
    private Button loginButton, registerButton, voteButton, viewResultsButton;
    private ChoiceBox<String> candidateChoiceBox;
    private Label errorLabel;

    @Override
    public void start(Stage primaryStage) {
        // Error label (used for displaying error messages)
        errorLabel = new Label();
        errorLabel.setTextFill(Color.RED);

        // Login Form
        usernameField = new TextField();
        passwordField = new PasswordField();
        loginButton = new Button("Login");
        registerButton = new Button("Register");

        loginButton.setOnAction(e -> login());
        registerButton.setOnAction(e -> register());

        VBox loginBox = new VBox(10, new Label("Username:"), usernameField, new Label("Password:"), passwordField, loginButton, registerButton, errorLabel);

        // Vote Form (only enabled after login)
        candidateChoiceBox = new ChoiceBox<>();
        voteButton = new Button("Vote");
        voteButton.setOnAction(e -> castVote());
        voteButton.setDisable(true);  // Disabled until login

        VBox voteBox = new VBox(10, new Label("Select Candidate:"), candidateChoiceBox, voteButton);

        // Results Form
        viewResultsButton = new Button("View Results");
        viewResultsButton.setOnAction(e -> viewResults());

        VBox resultsBox = new VBox(10, viewResultsButton);

        // Root Layout
        BorderPane root = new BorderPane();
        root.setTop(loginBox);
        root.setCenter(voteBox);
        root.setBottom(resultsBox);

        Scene scene = new Scene(root, 400, 400);
        primaryStage.setScene(scene);
        primaryStage.setTitle("Online Voting System");
        primaryStage.show();
    }

    // Login Method with Error Handling
    private void login() {
        errorLabel.setText("");  // Clear any previous error messages

        String username = usernameField.getText();
        String password = passwordField.getText();

        if (username.isEmpty() || password.isEmpty()) {
            errorLabel.setText("Please fill in both fields.");
            return;
        }

        String data = "{\"username\":\"" + username + "\", \"password\":\"" + password + "\"}";
        String response = sendPostRequest("http://localhost:8080/api/login", data);
        
        if (response.contains("Login successful")) {
            // Enable vote button and load candidates
            voteButton.setDisable(false);
            loadCandidates();
        } else {
            errorLabel.setText(response);  // Display error from backend
        }
    }

    // Register Method with Error Handling
    private void register() {
        errorLabel.setText("");  // Clear any previous error messages

        String username = usernameField.getText();
        String password = passwordField.getText();

        if (username.isEmpty() || password.isEmpty()) {
            errorLabel.setText("Please fill in both fields.");
            return;
        }

        String data = "{\"username\":\"" + username + "\", \"password\":\"" + password + "\"}";
        String response = sendPostRequest("http://localhost:8080/api/register", data);

        if (response.contains("Registration successful")) {
            errorLabel.setText("Registration successful. Please log in.");
        } else {
            errorLabel.setText(response);  // Display error from backend
        }
    }

    // Vote Method with Error Handling
    private void castVote() {
        errorLabel.setText("");  // Clear any previous error messages

        Long candidateId = (long) (candidateChoiceBox.getSelectionModel().getSelectedIndex() + 1); // Example: choosing based on index
        if (candidateId == 0) {
            errorLabel.setText("Please select a candidate.");
            return;
        }

        Long userId = 1L; // Placeholder user ID (should be retrieved from logged-in user)

        String data = "userId=" + userId + "&candidateId=" + candidateId;
        String response = sendPostRequest("http://localhost:8080/api/vote", data);

        if (response.contains("Vote cast successfully")) {
            errorLabel.setText("Vote cast successfully.");
        } else {
            errorLabel.setText(response);  // Display error from backend
        }
    }

    // View Results Method with Error Handling
    private void viewResults() {
        String response = sendGetRequest("http://localhost:8080/api/results");

        if (response.contains("Error")) {
            errorLabel.setText(response);  // Display error from backend
        } else {
            // Parse and display results
            System.out.println(response);  // Example, you can display the results in the UI
        }
    }

    // Utility to send POST request
    private String sendPostRequest(String urlStr, String data) {
        try {
            URL url = new URL(urlStr);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("POST");
            conn.setDoOutput(true);

            try (OutputStream os = conn.getOutputStream()) {
                byte[] input = data.getBytes("utf-8");
                os.write(input, 0, input.length);
            }

            try (BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream(), "utf-8"))) {
                StringBuilder response = new StringBuilder();
                String responseLine;
                while ((responseLine = br.readLine()) != null) {
                    response.append(responseLine.trim());
                }
                return response.toString();
            }
        } catch (IOException e) {
            e.printStackTrace();
            return "Error: " + e.getMessage();  // Displaying error message in the error label
        }
    }

    // Utility to send GET request
    private String sendGetRequest(String urlStr) {
        try {
            URL url = new URL(urlStr);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("GET");

            try (BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream(), "utf-8"))) {
                StringBuilder response = new StringBuilder();
                String responseLine;
                while ((responseLine = br.readLine()) != null) {
                    response.append(responseLine.trim());
                }
                return response.toString();
            }
        } catch (IOException e) {
            e.printStackTrace();
            return "Error: " + e.getMessage();  // Displaying error message in the error label
        }
    }

    // Load available candidates into ChoiceBox
    private void loadCandidates() {
        // In real-world cases, fetch candidates from the backend, this is just a mockup
        candidateChoiceBox.getItems().clear();
        candidateChoiceBox.getItems().addAll("Candidate 1", "Candidate 2", "Candidate 3");
    }

    public static void main(String[] args) {
        launch(args);
    }
}
